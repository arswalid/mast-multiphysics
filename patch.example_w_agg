diff --git a/examples/structural/example_w_agg/example_w_agg.cpp b/examples/structural/example_w_agg/example_w_agg.cpp
index 3d1cdf6..8875016 100755
--- a/examples/structural/example_w_agg/example_w_agg.cpp
+++ b/examples/structural/example_w_agg/example_w_agg.cpp
@@ -443,7 +443,7 @@ public:  // parametric constructor
 
         /// now setup the optimization data
         // number of design variables
-        _n_vars = _n_dv_stations_x + 2 * _n_dv_stations_x * _n_stiff; // for thickness variable
+        _n_vars = (_n_dv_stations_x/2+1) + 2 * (_n_dv_stations_x/2+1) * _n_stiff; // for thickness variable
 
         // number of equality constraints
         _n_eq = 0;
@@ -710,22 +710,22 @@ public:  // parametric constructor
 
         // initialization of design variables
         // panel design variables
-        for (unsigned int i = 0; i < _n_dv_stations_x; i++) {
+        for (unsigned int i = 0; i < (_n_dv_stations_x/2+1); i++) {
             _dv_init[i] = _input("dv_init", "", th / th_u, i);
         }
         // stiffeners design variables
         for (unsigned int j = 0; j < _n_stiff; j++) {
-            for (unsigned int i = 0; i < _n_dv_stations_x; i++) {
-                _dv_init[(2 * j + 1) * _n_dv_stations_x + i] = _input("dv_init", "", th_stiffy / th_u, i);
-                _dv_init[(2 * j + 2) * _n_dv_stations_x + i] = _input("dv_init", "", th_stiffz / th_u, i);
+            for (unsigned int i = 0; i < (_n_dv_stations_x/2+1); i++) {
+                _dv_init[(2 * j + 1) * (_n_dv_stations_x/2+1) + i] = _input("dv_init", "", th_stiffy / th_u, i);
+                _dv_init[(2 * j + 2) * (_n_dv_stations_x/2+1) + i] = _input("dv_init", "", th_stiffz / th_u, i);
             }
         }
     }
 
     void _init_thickness_variables_plate(){
         // create the thickness variables
-        _th_station_parameters_plate.resize(_n_dv_stations_x);
-        _th_station_functions_plate.resize(_n_dv_stations_x);
+        _th_station_parameters_plate.resize((_n_dv_stations_x/2+1));
+        _th_station_functions_plate.resize((_n_dv_stations_x/2+1));
 
         Real
         kappa_val = _input("kappa", "shear correction factor",  5./6.);
@@ -735,7 +735,7 @@ public:  // parametric constructor
         _parameters[kappa->name()]    = kappa;
         _field_functions.insert(kappa_f);
         
-        for (unsigned int i = 0; i < _n_dv_stations_x; i++) {
+        for (unsigned int i = 0; i < (_n_dv_stations_x/2+1); i++) {
             std::ostringstream oss;
             oss << "h_" << i;
 
@@ -754,8 +754,16 @@ public:  // parametric constructor
             _th_station_functions_plate[i] = h_f;
 
             _problem_parameters[i] = h;
+
+            if (i < (_n_dv_stations_x/2)) {
+                // symmetry inforcement
+                _thy_station_vals.insert(std::pair<Real, MAST::FieldFunction<Real> *>
+                                                 ((_n_dv_stations_x - i - 1) * _dx, h_f));
+            }
         }
 
+
+
         // now create the h_y function and give it to the property card
         _th_plate_f = new MAST::MultilinearInterpolation("h", _thy_station_vals);
         _thy_station_vals.clear();
@@ -821,10 +829,10 @@ public:  // parametric constructor
     void _init_thickness_variables_stiff() {
 
         // store parameters and function to be deleted later
-        _thy_station_parameters_stiff.resize(_n_dv_stations_x * _n_stiff);
-        _thy_station_functions_stiff.resize(_n_dv_stations_x * _n_stiff);
-        _thz_station_parameters_stiff.resize(_n_dv_stations_x * _n_stiff);
-        _thz_station_functions_stiff.resize(_n_dv_stations_x * _n_stiff);
+        _thy_station_parameters_stiff.resize((_n_dv_stations_x/2+1) * _n_stiff);
+        _thy_station_functions_stiff.resize((_n_dv_stations_x/2+1) * _n_stiff);
+        _thz_station_parameters_stiff.resize((_n_dv_stations_x/2+1) * _n_stiff);
+        _thz_station_functions_stiff.resize((_n_dv_stations_x/2+1) * _n_stiff);
 
         // store the width and height of the panel in the stiffener
         _thy_stiff_f.resize(_n_stiff);
@@ -851,7 +859,7 @@ public:  // parametric constructor
 
             // first define the thickness station parameters and the thickness
             // field function
-            for (unsigned int j = 0; j < _n_dv_stations_x; j++) {
+            for (unsigned int j = 0; j < (_n_dv_stations_x/2+1); j++) {
                 std::ostringstream ossy, ossz;
                 ossy << "h_y_" << j << "_stiff_" << i;
                 ossz << "h_z_" << j << "_stiff_" << i;
@@ -873,17 +881,24 @@ public:  // parametric constructor
                                                        (j * _dx, h_z_f));
 
                 // add the function to the parameter set
-                _thy_station_parameters_stiff[i * _n_dv_stations_x + j] = h_y;
-                _thy_station_functions_stiff[i * _n_dv_stations_x + j] = h_y_f;
-                _thz_station_parameters_stiff[i * _n_dv_stations_x + j] = h_z;
-                _thz_station_functions_stiff[i * _n_dv_stations_x + j] = h_z_f;
+                _thy_station_parameters_stiff[i * (_n_dv_stations_x/2+1) + j] = h_y;
+                _thy_station_functions_stiff[i * (_n_dv_stations_x/2+1) + j] = h_y_f;
+                _thz_station_parameters_stiff[i * (_n_dv_stations_x/2+1) + j] = h_z;
+                _thz_station_functions_stiff[i * (_n_dv_stations_x/2+1) + j] = h_z_f;
 
 
                 // tell the assembly system about the sensitvity parameter
                 //_discipline->add_parameter(*h_y);
                 //_discipline->add_parameter(*h_z);
-                _problem_parameters[(2 * i + 1) * _n_dv_stations_x + j] = h_y;
-                _problem_parameters[(2 * i + 2) * _n_dv_stations_x + j] = h_z;
+                _problem_parameters[(2 * i + 1) * (_n_dv_stations_x/2+1) + j] = h_y;
+                _problem_parameters[(2 * i + 2) * (_n_dv_stations_x/2+1) + j] = h_z;
+
+                if (j < (_n_dv_stations_x/2)) {
+                    // symmetry inforcement
+                    _thy_station_vals_stiff.insert(std::pair<Real, MAST::FieldFunction<Real> *> ((_n_dv_stations_x - j - 1) * _dx, h_y_f));
+                    _thz_station_vals_stiff.insert(std::pair<Real, MAST::FieldFunction<Real> *> ((_n_dv_stations_x - j - 1) * _dx, h_z_f));
+                }
+
             }
 
             // now create the h_y function and give it to the property card
